name: CI/CD - WebStackBase

on:
  push:
    branches:
      - principal
  pull_request:
    branches:
      - principal

jobs:
  build-and-test:
    name: 🔨 Build & ✅ Test
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v3

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore ./api/WebStackBase.Api.sln

      - name: 🛠️ Build
        run: dotnet build ./api/WebStackBase.Api.sln --configuration Release --no-restore

      - name: 🧪 Run tests
        run: dotnet test ./api/WebStackBase.Tests/WebStackBase.Tests.csproj --verbosity normal

      - name: 📤 Publish WebAPI
        run: dotnet publish ./api/WebStackBase.WebAPI/WebStackBase.WebAPI.csproj --configuration Release --output ./api/WebStackBase.WebAPI/publish

      - name: 🚀 Setup and deploy API to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_LIFETIME: ${{ secrets.JWT_LIFETIME }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
      
          # Copy files to VPS
          echo "📦 Copying files to VPS..."
          scp -i private_key -r ./api/WebStackBase.WebAPI/publish ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/var/www/webstackbase-temp
      
          # Check if the service file already exists
          echo "📝 Checking if systemd service already exists..."
          ssh -i private_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            if [ ! -f /etc/systemd/system/web-stack-base-api.service ]; then
              # Create systemd service file for the API if it doesn't exist
              echo "[Unit]
              Description=WebStackBase API
              After=network.target
      
              [Service]
              Environment=ASPNETCORE_ENVIRONMENT=Production
              Environment=\"ConnectionStrings__WebStackBase=${{secrets.DB_CONNECTION_STRING}}\"
              Environment=\"AuthenticationConfiguration__JwtSettings_Secret=${{secrets.JWT_SECRET}}\"
              Environment=\"AuthenticationConfiguration__JwtSettings_TokenLifetime=${{secrets.JWT_LIFETIME}}\"
              ExecStart=/usr/bin/dotnet /var/www/webstackbase/WebStackBase.WebAPI.dll
              WorkingDirectory=/var/www/webstackbase
              Restart=always
              User=www-data
              Group=www-data
      
              [Install]
              WantedBy=multi-user.target" | sudo tee /etc/systemd/system/web-stack-base-api.service
      
              # Enable and start the service
              sudo systemctl daemon-reload
              sudo systemctl enable web-stack-base-api
              sudo systemctl start web-stack-base-api
              echo "🚀 Systemd service created and started."
            else
              sudo systemctl restart web-stack-base-api
              echo "✅ Systemd service already exists, skipping creation."
            fi

            # Run migrations
            echo "🔄 Running database migrations..."
            cd /var/www/webstackbase
            dotnet ef database update --connection "${DB_CONNECTION_STRING}"
          EOF

          # Clean up the private key
          rm private_key

  deploy-docker-compose:
    name: 🚚 Copy Docker Compose to VPS
    runs-on: ubuntu-latest
    needs: build-and-test 
    
    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v3
    
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
      - name: Create directory if not exists
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'mkdir -p /opt/sqlserver'
        
      - name: Ensure proper permissions for /opt/sqlserver
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'sudo chown -R ${{ secrets.VPS_USER }}:${{ secrets.VPS_USER }} /opt/sqlserver && sudo chmod -R 755 /opt/sqlserver'
    
      - name: Copy docker-compose.sqlserver.yml to VPS
        run: |
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "infra/docker-compose.sqlserver.yml" "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/sqlserver/docker-compose.sqlserver.yml"
        
      - name: Verify the file on the VPS
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'ls /opt/sqlserver/docker-compose.sqlserver.yml'